EXPLICIT VS IMPLICIT GROUPS:
There are two basic ways to group data: implicit and explicit grouping. Implicit grouping is when you don't specify what to group by, so the system treats all the data as one big group. Explicit grouping is when you specify which columns to group by.
Examples:
Implicit: SELECT SUM(amount) AS 'Total Payments' 
FROM payment;
- We are suming all the payment's amount grouping them all in one big group (total payments)

Explicit:
SELECT customer_id, SUM(amount) AS 'Total Payments'
FROM payment
GROUP BY customer_id;
- We are suming all the payment's per customer, adding a GROUP BY clause.

DISTINCT VALUES:
Counting distinct values only counts each unique entry once, which is great for avoiding double counting. Counting non-distinct values counts everything, including duplicates.
Example:
SELECT DISTINCT amount
FROM payment;
- This will only count unique values. Retrieving only 19 rows from the payment table. Without using DISTINCT it would retrieve 1000 rows.

EXPRESSIONS INSIDE AGG FUNCTIONS:
We can use expressions in aggregation functions. This means you can do more than just simple counts or sums. You can create custom calculations or functions to analyze the data in a more deeply way.
Example:
SELECT MAX(datediff(return_date,rental_date))
FROM rental;
- With this query we are calculating the difference in days between the return and rental date, and then finding the highest value.

NULL VALUES:
Handling null values is also important. When we perform calculations with null values, any row with a null entry gets left out of the calculation (will be ignored). So, it's critical to decide whether we want to include or exclude nulls based on what our analysis requires.
Example:
INSERT INTO number_tbl VALUES (2);
INSERT INTO number_tbl VALUES (2);
INSERT INTO number_tbl VALUES (NULL);

- In this example I'm adding 3 rows to the number table. If we try running some aggregation function against this table we find these results.
COUNT -> 3 (2,2, NULL)
SUM -> 4 (2+2) NULL ignored
MAX -> 2 NULL ignored
AVG -> 2 ((2+2) / 2) NULL ignored

GROUPING:
People are rarely interested in looking at raw data; instead, people engaging in data analysis will want to manipulate the raw data to better suit their needs.

Single-column grouping:
Single grouping is one of the simplest and most-often-used type of grouping. We are grouping our data only in one group.
Example:
SELECT actor_id, count(*)
FROM film_actor
GROUP BY actor_id;

- In this example, we want to find the number of films associated with each actor. So, we are displaying all actors. Then, we are grouping each actor with their total films. Ex. actor 1 has been in 19 films.

Multi-column grouping:
Maybe we want to generate groups that span more than one column, to satisfy my search. Following the previous example, let's say that I also want to find the total

Finally, the choice between single and multiple column grouping is all about how detailed you want your analysis to be. Single column grouping gives a high-level view, while multiple column grouping offers a more detailed look by considering combinations of attributes.
